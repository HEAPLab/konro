#ifndef MONITOREVENT_H
#define MONITOREVENT_H

#include "baseevent.h"
#include "../platformpower.h"
#include "../platformtemperature.h"
#include <vector>
#include <iostream>

namespace rmcommon {

/*!
 * \class event generated by the periodical sampling of machine status information.
 */
class MonitorEvent : public BaseEvent {
    PlatformTemperature platTemp_;
    PlatformPower platPower_;
public:
    MonitorEvent(PlatformTemperature temp, PlatformPower power) :
        BaseEvent("MonitorEvent"),
        platTemp_(temp),
        platPower_(power)
    {}
    virtual ~MonitorEvent() = default;

    PlatformTemperature getPlatformTemperature() {
        return platTemp_;
    }

    PlatformPower getPlatformPower() {
        return platPower_;
    }

    virtual void printOnOstream(std::ostream &os) const {
        os << "{";
        os << "\"platTemp\":" << platTemp_;
        os << ",\"platPower\":" << platPower_;
        os << "}";
    }
};

}   // namespace rmcommon

#endif // MONITOREVENT_H
