#ifndef PROCFEEDBACKEVENT_H
#define PROCFEEDBACKEVENT_H

#include "baseevent.h"
#include <iomanip>
#include <sys/types.h>
#include <unistd.h>

using namespace std;

namespace rmcommon {

/*!
 * \class event asynchronously generated by an integrated application.
 * This type of event is used by integrated applications to provide a
 * feedback to Konro regarding their QoS.
 */
class ProcFeedbackEvent : public BaseEvent {

    /*! The application sending the feedback */
    pid_t pid_;

    /* 0 = the current QoS level is sufficient
     * 1 = the current QoS level is insufficient
     */
    bool feedback_;

public:
    ProcFeedbackEvent(pid_t pid, bool feedback) :
        pid_(pid),
        feedback_(feedback)
    {}

    pid_t getPid() const noexcept {
        return pid_;
    }

    bool getFeedback() const noexcept {
        return feedback_;
    }

    void printOnOstream(std::ostream &os) const override {
        ios_base::fmtflags f = os.flags();
        os.flags(f | ios_base::boolalpha);
        os << "{"
           << "\"pid\":" << pid_
           << ",\"feedback\":" << feedback_
           << "}";
        os.flags(f);
    }
};

} // namespace rmcommon

#endif // PROCFEEDBACKEVENT_H
