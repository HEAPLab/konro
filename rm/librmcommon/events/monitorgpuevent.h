#ifndef MONITORGPUEVENT_H
#define MONITORGPUEVENT_H

#include "baseevent.h"
#include "../gpuload.h"
#include "../gpupower.h"
#include "../gputemperature.h"
#include <vector>
#include <iostream>

namespace rmcommon {

/*!
 * \class event generated by the periodical sampling of machine status information.
 */
class MonitorGpuEvent : public BaseEvent {
    GpuTemperature gpuTemp_;
    GpuPower gpuActualPower_;
    GpuLoad gpuLoad_;
public:
    MonitorGpuEvent(GpuTemperature temp, GpuPower power, GpuLoad load) :
        BaseEvent("MonitorEvent"),
        gpuTemp_(temp),
        gpuActualPower_(power),
        gpuLoad_(load)
    {}
    virtual ~MonitorGpuEvent() = default;

    GpuTemperature getGpuTemperature() const {
        return gpuTemp_;
    }

    GpuPower getPlatformPower() const {
        return gpuActualPower_;
    }

    GpuLoad getPlatformLoad() const {
        return gpuLoad_;
    }

    virtual void printOnOstream(std::ostream &os) const {
        os << "{";
        os << "\"platTemp\":" << gpuTemp_;
        os << ",\"platPower\":" << gpuActualPower_;
        os << ",\"platLoad\":" << gpuLoad_;
        os << "}";
    }
};

}   // namespace rmcommon

#endif // MONITORGPUEVENT_H
