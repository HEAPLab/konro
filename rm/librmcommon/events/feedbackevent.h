#ifndef FEEDBACKEVENT_H
#define FEEDBACKEVENT_H

#include "baseevent.h"
#include <iomanip>
#include <sys/types.h>
#include <unistd.h>

using namespace std;

namespace rmcommon {

/*!
 * \class event generated by the WorkloadManager after validating
 * a FeedbackRequestEvent.
 */
class FeedbackEvent : public BaseEvent {

    /*! The application sending the feedback */
    pid_t pid_;

    int feedback_;

public:
    FeedbackEvent(pid_t pid, int feedback) :
        BaseEvent("FeedbackEvent"),
        pid_(pid),
        feedback_(feedback)
    {}

    pid_t getPid() const noexcept {
        return pid_;
    }

    int getFeedback() const noexcept {
        return feedback_;
    }

    void printOnOstream(std::ostream &os) const override {
        ios_base::fmtflags f = os.flags();
        os.flags(f | ios_base::boolalpha);
        os << "{"
           << "\"pid\":" << pid_
           << ",\"feedback\":" << feedback_
           << "}";
        os.flags(f);
    }
};

} // namespace rmcommon

#endif // FEEDBACKEVENT_H
